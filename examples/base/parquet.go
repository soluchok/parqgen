package base

// Code generated by github.com/inigolabs/parquet.  DO NOT EDIT.

import (
	"context"
	"encoding/binary"
	"fmt"
	"io"
	"math"
	"strings"

	"github.com/inigolabs/parquet"
	sch "github.com/inigolabs/parquet/schema"
	"github.com/valyala/bytebufferpool"
)

var _ = math.MaxInt32 // to avoid unused import

type compression int

const (
	compressionUncompressed compression = 0
	compressionSnappy       compression = 1
	compressionGzip         compression = 2
	compressionUnknown      compression = -1
)

var buffpool = bytebufferpool.Pool{}

// ParquetWriter reprents a row group
type ParquetWriter struct {
	fields []Field

	len int

	// child points to the next page
	child *ParquetWriter

	// max is the number of Record items that can get written before
	// a new set of column chunks is written
	max int

	meta        *parquet.Metadata
	w           io.Writer
	compression compression
}

func Fields(compression compression) []Field {
	return []Field{
		NewInt64Field(readID, writeID, []string{"ID"}, fieldCompression(compression)),
		NewStringField(readOrgName, writeOrgName, []string{"OrgName"}, fieldCompression(compression)),
		NewStringField(readTraceID, writeTraceID, []string{"TraceID"}, fieldCompression(compression)),
		NewInt64Field(readServiceID, writeServiceID, []string{"ServiceID"}, fieldCompression(compression)),
		NewStringField(readServiceName, writeServiceName, []string{"ServiceName"}, fieldCompression(compression)),
		NewStringField(readServiceLabel, writeServiceLabel, []string{"ServiceLabel"}, fieldCompression(compression)),
		NewInt64Field(readObservedAt, writeObservedAt, []string{"ObservedAt"}, fieldCompression(compression)),
		NewStringField(readClientAddr, writeClientAddr, []string{"ClientAddr"}, fieldCompression(compression)),
		NewStringField(readClientVersion, writeClientVersion, []string{"ClientVersion"}, fieldCompression(compression)),
		NewStringField(readUserID, writeUserID, []string{"UserID"}, fieldCompression(compression)),
		NewStringField(readProfile, writeProfile, []string{"Profile"}, fieldCompression(compression)),
		NewStringOptionalField(readRoles, writeRoles, []string{"Roles"}, []int{2}, optionalFieldCompression(compression)),
		NewStringField(readOperationType, writeOperationType, []string{"OperationType"}, fieldCompression(compression)),
		NewStringField(readOperationName, writeOperationName, []string{"OperationName"}, fieldCompression(compression)),
		NewStringField(readQueryHash, writeQueryHash, []string{"QueryHash"}, fieldCompression(compression)),
		NewStringField(readQueryInput, writeQueryInput, []string{"QueryInput"}, fieldCompression(compression)),
		NewStringField(readQueryOutput, writeQueryOutput, []string{"QueryOutput"}, fieldCompression(compression)),
		NewInt32Field(readDepth, writeDepth, []string{"Depth"}, fieldCompression(compression)),
		NewInt32Field(readHeight, writeHeight, []string{"Height"}, fieldCompression(compression)),
		NewInt32Field(readDirectives, writeDirectives, []string{"Directives"}, fieldCompression(compression)),
		NewInt32Field(readRequestSize, writeRequestSize, []string{"RequestSize"}, fieldCompression(compression)),
		NewInt32Field(readResponseSize, writeResponseSize, []string{"ResponseSize"}, fieldCompression(compression)),
		NewInt32Field(readCountTotal, writeCountTotal, []string{"CountTotal"}, fieldCompression(compression)),
		NewInt32Field(readCreditLeft, writeCreditLeft, []string{"CreditLeft"}, fieldCompression(compression)),
		NewInt32Field(readCreditLeftPerMinute, writeCreditLeftPerMinute, []string{"CreditLeftPerMinute"}, fieldCompression(compression)),
		NewInt32Field(readCreditLeftPerHour, writeCreditLeftPerHour, []string{"CreditLeftPerHour"}, fieldCompression(compression)),
		NewInt32Field(readCallsLeftPerMinute, writeCallsLeftPerMinute, []string{"CallsLeftPerMinute"}, fieldCompression(compression)),
		NewInt32Field(readCallsLeftPerHour, writeCallsLeftPerHour, []string{"CallsLeftPerHour"}, fieldCompression(compression)),
		NewFloat64Field(readDuration, writeDuration, []string{"Duration"}, fieldCompression(compression)),
		NewFloat64Field(readSidecarProcessTime, writeSidecarProcessTime, []string{"SidecarProcessTime"}, fieldCompression(compression)),
		NewFloat64Field(readServerProcessTime, writeServerProcessTime, []string{"ServerProcessTime"}, fieldCompression(compression)),
		NewStringField(readStatus, writeStatus, []string{"Status"}, fieldCompression(compression)),
		NewStringField(readInternalReason, writeInternalReason, []string{"InternalReason"}, fieldCompression(compression)),
		NewBoolField(readHasErrors, writeHasErrors, []string{"HasErrors"}, fieldCompression(compression)),
		NewStringField(readInternalError, writeInternalError, []string{"InternalError"}, fieldCompression(compression)),
		NewStringField(readInternalStack, writeInternalStack, []string{"InternalStack"}, fieldCompression(compression)),
	}
}

func readID(x Base) int64 {
	return x.ID
}

func writeID(x *Base, vals []int64) {
	x.ID = vals[0]
}

func readOrgName(x Base) string {
	return x.OrgName
}

func writeOrgName(x *Base, vals []string) {
	x.OrgName = vals[0]
}

func readTraceID(x Base) string {
	return x.TraceID
}

func writeTraceID(x *Base, vals []string) {
	x.TraceID = vals[0]
}

func readServiceID(x Base) int64 {
	return x.ServiceID
}

func writeServiceID(x *Base, vals []int64) {
	x.ServiceID = vals[0]
}

func readServiceName(x Base) string {
	return x.ServiceName
}

func writeServiceName(x *Base, vals []string) {
	x.ServiceName = vals[0]
}

func readServiceLabel(x Base) string {
	return x.ServiceLabel
}

func writeServiceLabel(x *Base, vals []string) {
	x.ServiceLabel = vals[0]
}

func readObservedAt(x Base) int64 {
	return x.ObservedAt
}

func writeObservedAt(x *Base, vals []int64) {
	x.ObservedAt = vals[0]
}

func readClientAddr(x Base) string {
	return x.ClientAddr
}

func writeClientAddr(x *Base, vals []string) {
	x.ClientAddr = vals[0]
}

func readClientVersion(x Base) string {
	return x.ClientVersion
}

func writeClientVersion(x *Base, vals []string) {
	x.ClientVersion = vals[0]
}

func readUserID(x Base) string {
	return x.UserID
}

func writeUserID(x *Base, vals []string) {
	x.UserID = vals[0]
}

func readProfile(x Base) string {
	return x.Profile
}

func writeProfile(x *Base, vals []string) {
	x.Profile = vals[0]
}

func readRoles(x Base, vals []string, defs, reps []uint8) ([]string, []uint8, []uint8) {
	var lastRep uint8

	if len(x.Roles) == 0 {
		defs = append(defs, 0)
		reps = append(reps, lastRep)
	} else {
		for i0, x0 := range x.Roles {
			if i0 >= 1 {
				lastRep = 1
			}
			defs = append(defs, 1)
			reps = append(reps, lastRep)
			vals = append(vals, x0)
		}
	}

	return vals, defs, reps
}

func writeRoles(x *Base, vals []string, defs, reps []uint8) (int, int) {
	var nVals, nLevels int
	ind := make(indices, 1)

	for i := range defs {
		def := defs[i]
		rep := reps[i]
		if i > 0 && rep == 0 {
			break
		}

		nLevels++
		ind.rep(rep)

		switch def {
		case 1:
			x.Roles = append(x.Roles, vals[nVals])
			nVals++
		}
	}

	return nVals, nLevels
}

func readOperationType(x Base) string {
	return x.OperationType
}

func writeOperationType(x *Base, vals []string) {
	x.OperationType = vals[0]
}

func readOperationName(x Base) string {
	return x.OperationName
}

func writeOperationName(x *Base, vals []string) {
	x.OperationName = vals[0]
}

func readQueryHash(x Base) string {
	return x.QueryHash
}

func writeQueryHash(x *Base, vals []string) {
	x.QueryHash = vals[0]
}

func readQueryInput(x Base) string {
	return x.QueryInput
}

func writeQueryInput(x *Base, vals []string) {
	x.QueryInput = vals[0]
}

func readQueryOutput(x Base) string {
	return x.QueryOutput
}

func writeQueryOutput(x *Base, vals []string) {
	x.QueryOutput = vals[0]
}

func readDepth(x Base) int32 {
	return x.Depth
}

func writeDepth(x *Base, vals []int32) {
	x.Depth = vals[0]
}

func readHeight(x Base) int32 {
	return x.Height
}

func writeHeight(x *Base, vals []int32) {
	x.Height = vals[0]
}

func readDirectives(x Base) int32 {
	return x.Directives
}

func writeDirectives(x *Base, vals []int32) {
	x.Directives = vals[0]
}

func readRequestSize(x Base) int32 {
	return x.RequestSize
}

func writeRequestSize(x *Base, vals []int32) {
	x.RequestSize = vals[0]
}

func readResponseSize(x Base) int32 {
	return x.ResponseSize
}

func writeResponseSize(x *Base, vals []int32) {
	x.ResponseSize = vals[0]
}

func readCountTotal(x Base) int32 {
	return x.CountTotal
}

func writeCountTotal(x *Base, vals []int32) {
	x.CountTotal = vals[0]
}

func readCreditLeft(x Base) int32 {
	return x.CreditLeft
}

func writeCreditLeft(x *Base, vals []int32) {
	x.CreditLeft = vals[0]
}

func readCreditLeftPerMinute(x Base) int32 {
	return x.CreditLeftPerMinute
}

func writeCreditLeftPerMinute(x *Base, vals []int32) {
	x.CreditLeftPerMinute = vals[0]
}

func readCreditLeftPerHour(x Base) int32 {
	return x.CreditLeftPerHour
}

func writeCreditLeftPerHour(x *Base, vals []int32) {
	x.CreditLeftPerHour = vals[0]
}

func readCallsLeftPerMinute(x Base) int32 {
	return x.CallsLeftPerMinute
}

func writeCallsLeftPerMinute(x *Base, vals []int32) {
	x.CallsLeftPerMinute = vals[0]
}

func readCallsLeftPerHour(x Base) int32 {
	return x.CallsLeftPerHour
}

func writeCallsLeftPerHour(x *Base, vals []int32) {
	x.CallsLeftPerHour = vals[0]
}

func readDuration(x Base) float64 {
	return x.Duration
}

func writeDuration(x *Base, vals []float64) {
	x.Duration = vals[0]
}

func readSidecarProcessTime(x Base) float64 {
	return x.SidecarProcessTime
}

func writeSidecarProcessTime(x *Base, vals []float64) {
	x.SidecarProcessTime = vals[0]
}

func readServerProcessTime(x Base) float64 {
	return x.ServerProcessTime
}

func writeServerProcessTime(x *Base, vals []float64) {
	x.ServerProcessTime = vals[0]
}

func readStatus(x Base) string {
	return x.Status
}

func writeStatus(x *Base, vals []string) {
	x.Status = vals[0]
}

func readInternalReason(x Base) string {
	return x.InternalReason
}

func writeInternalReason(x *Base, vals []string) {
	x.InternalReason = vals[0]
}

func readHasErrors(x Base) bool {
	return x.HasErrors
}

func writeHasErrors(x *Base, vals []bool) {
	x.HasErrors = vals[0]
}

func readInternalError(x Base) string {
	return x.InternalError
}

func writeInternalError(x *Base, vals []string) {
	x.InternalError = vals[0]
}

func readInternalStack(x Base) string {
	return x.InternalStack
}

func writeInternalStack(x *Base, vals []string) {
	x.InternalStack = vals[0]
}

func fieldCompression(c compression) func(*parquet.RequiredField) {
	switch c {
	case compressionUncompressed:
		return parquet.RequiredFieldUncompressed
	case compressionSnappy:
		return parquet.RequiredFieldSnappy
	case compressionGzip:
		return parquet.RequiredFieldGzip
	default:
		return parquet.RequiredFieldUncompressed
	}
}

func optionalFieldCompression(c compression) func(*parquet.OptionalField) {
	switch c {
	case compressionUncompressed:
		return parquet.OptionalFieldUncompressed
	case compressionSnappy:
		return parquet.OptionalFieldSnappy
	case compressionGzip:
		return parquet.OptionalFieldGzip
	default:
		return parquet.OptionalFieldUncompressed
	}
}

func NewParquetWriter(w io.Writer, opts ...func(*ParquetWriter) error) (*ParquetWriter, error) {
	return newParquetWriter(w, append(opts, begin)...)
}

func newParquetWriter(w io.Writer, opts ...func(*ParquetWriter) error) (*ParquetWriter, error) {
	p := &ParquetWriter{
		max:         1000,
		w:           w,
		compression: compressionSnappy,
	}

	for _, opt := range opts {
		if err := opt(p); err != nil {
			return nil, err
		}
	}

	p.fields = Fields(p.compression)
	if p.meta == nil {
		ff := Fields(p.compression)
		schema := make([]parquet.Field, len(ff))
		for i, f := range ff {
			schema[i] = f.Schema()
		}
		p.meta = parquet.New(schema...)
	}

	return p, nil
}

// MaxPageSize is the maximum number of rows in each row groups' page.
func MaxPageSize(m int) func(*ParquetWriter) error {
	return func(p *ParquetWriter) error {
		p.max = m
		return nil
	}
}

var par1 = []byte("PAR1")

func begin(p *ParquetWriter) error {
	_, err := p.w.Write(par1)
	return err
}

func withMeta(m *parquet.Metadata) func(*ParquetWriter) error {
	return func(p *ParquetWriter) error {
		p.meta = m
		return nil
	}
}

func Uncompressed(p *ParquetWriter) error {
	p.compression = compressionUncompressed
	return nil
}

func Snappy(p *ParquetWriter) error {
	p.compression = compressionSnappy
	return nil
}

func Gzip(p *ParquetWriter) error {
	p.compression = compressionGzip
	return nil
}

func withCompression(c compression) func(*ParquetWriter) error {
	return func(p *ParquetWriter) error {
		p.compression = c
		return nil
	}
}

func (p *ParquetWriter) Write() error {
	for i, f := range p.fields {
		if err := f.Write(p.w, p.meta); err != nil {
			return err
		}

		for child := p.child; child != nil; child = child.child {
			if err := child.fields[i].Write(p.w, p.meta); err != nil {
				return err
			}
		}
	}

	p.fields = Fields(p.compression)
	p.child = nil
	p.len = 0

	schema := make([]parquet.Field, len(p.fields))
	for i, f := range p.fields {
		schema[i] = f.Schema()
	}
	p.meta.StartRowGroup(schema...)
	return nil
}

func (p *ParquetWriter) Close() error {
	if err := p.meta.Footer(p.w); err != nil {
		return err
	}

	_, err := p.w.Write(par1)
	return err
}

func (p *ParquetWriter) Add(rec Base) {
	if p.len == p.max {
		if p.child == nil {
			// an error can't happen here
			p.child, _ = newParquetWriter(p.w, MaxPageSize(p.max), withMeta(p.meta), withCompression(p.compression))
		}

		p.child.Add(rec)
		return
	}

	p.meta.NextDoc()
	for _, f := range p.fields {
		f.Add(rec)
	}

	p.len++
}

type Field interface {
	Add(r Base)
	Write(w io.Writer, meta *parquet.Metadata) error
	Schema() parquet.Field
	Scan(r *Base)
	Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error
	Name() string
	Levels() ([]uint8, []uint8)
}

func getFields(ff []Field) map[string]Field {
	m := make(map[string]Field, len(ff))
	for _, f := range ff {
		m[f.Name()] = f
	}
	return m
}

func NewParquetReader(ctx context.Context, r io.ReadSeeker, opts ...func(*ParquetReader)) (*ParquetReader, error) {
	ff := Fields(compressionUnknown)
	pr := &ParquetReader{
		r: r,
	}

	for _, opt := range opts {
		opt(pr)
	}

	schema := make([]parquet.Field, len(ff))
	for i, f := range ff {
		pr.fieldNames = append(pr.fieldNames, f.Name())
		schema[i] = f.Schema()
	}

	meta := parquet.New(schema...)
	if err := meta.ReadFooter(ctx, r); err != nil {
		return nil, err
	}
	pr.rows = meta.Rows()
	var err error
	pr.pages, err = meta.Pages()
	if err != nil {
		return nil, err
	}

	pr.rowGroups = meta.RowGroups()
	_, err = r.Seek(4, io.SeekStart)
	if err != nil {
		return nil, err
	}
	pr.meta = meta

	return pr, pr.readRowGroup(ctx)
}

func readerIndex(i int) func(*ParquetReader) {
	return func(p *ParquetReader) {
		p.index = i
	}
}

// ParquetReader reads one page from a row group.
type ParquetReader struct {
	fields         map[string]Field
	fieldNames     []string
	index          int
	cursor         int64
	rows           int64
	rowGroupCursor int64
	rowGroupCount  int64
	pages          map[string][]parquet.Page
	meta           *parquet.Metadata
	err            error

	r         io.ReadSeeker
	rowGroups []parquet.RowGroup
}

type Levels struct {
	Name string
	Defs []uint8
	Reps []uint8
}

func (p *ParquetReader) Levels() []Levels {
	var out []Levels
	//for {
	for _, name := range p.fieldNames {
		f := p.fields[name]
		d, r := f.Levels()
		out = append(out, Levels{Name: f.Name(), Defs: d, Reps: r})
	}
	//	if err := p.readRowGroup(); err != nil {
	//		break
	//	}
	//}
	return out
}

func (p *ParquetReader) Error() error {
	return p.err
}

func (p *ParquetReader) readRowGroup(ctx context.Context) error {
	p.rowGroupCursor = 0

	if len(p.rowGroups) == 0 {
		p.rowGroupCount = 0
		return nil
	}

	rg := p.rowGroups[0]
	p.fields = getFields(Fields(compressionUnknown))
	p.rowGroupCount = rg.Rows
	p.rowGroupCursor = 0
	for _, col := range rg.Columns() {
		name := strings.Join(col.MetaData.PathInSchema, ".")
		f, ok := p.fields[name]
		if !ok {
			return fmt.Errorf("unknown field: %s", name)
		}
		pages := p.pages[name]
		if len(pages) <= p.index {
			break
		}

		pg := pages[0]
		if err := f.Read(ctx, p.r, pg); err != nil {
			return fmt.Errorf("unable to read field %s, err: %s", f.Name(), err)
		}
		p.pages[name] = p.pages[name][1:]
	}
	p.rowGroups = p.rowGroups[1:]
	return nil
}

func (p *ParquetReader) Rows() int64 {
	return p.rows
}

func (p *ParquetReader) Next(ctx context.Context) bool {
	if p.err == nil && p.cursor >= p.rows {
		return false
	}
	if p.rowGroupCursor >= p.rowGroupCount {
		p.err = p.readRowGroup(ctx)
		if p.err != nil {
			return false
		}
	}

	p.cursor++
	p.rowGroupCursor++
	return true
}

func (p *ParquetReader) Scan(x *Base) {
	if p.err != nil {
		return
	}

	for _, name := range p.fieldNames {
		f := p.fields[name]
		f.Scan(x)
	}
}

type Int64Field struct {
	vals []int64
	parquet.RequiredField
	read  func(r Base) int64
	write func(r *Base, vals []int64)
	stats *int64stats
}

func NewInt64Field(read func(r Base) int64, write func(r *Base, vals []int64), path []string, opts ...func(*parquet.RequiredField)) *Int64Field {
	return &Int64Field{
		read:          read,
		write:         write,
		RequiredField: parquet.NewRequiredField(path, opts...),
		stats:         newInt64stats(),
	}
}

func (f *Int64Field) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: Int64Type, RepetitionType: parquet.RepetitionRequired, Types: []int{0}}
}

func (f *Int64Field) Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error {
	rr, _, err := f.DoRead(ctx, r, pg)
	if err != nil {
		return err
	}

	v := make([]int64, int(pg.N))
	err = binary.Read(rr, binary.LittleEndian, &v)
	f.vals = append(f.vals, v...)
	return err
}

func (f *Int64Field) Write(w io.Writer, meta *parquet.Metadata) error {
	buf := buffpool.Get()
	defer buffpool.Put(buf)

	bs := make([]byte, 8)
	for _, v := range f.vals {
		binary.LittleEndian.PutUint64(bs, uint64(v))
		if _, err := buf.Write(bs); err != nil {
			return err
		}
	}
	return f.DoWrite(w, meta, buf.Bytes(), len(f.vals), f.stats)
}

func (f *Int64Field) Scan(r *Base) {
	if len(f.vals) == 0 {
		return
	}

	f.write(r, f.vals)
	f.vals = f.vals[1:]
}

func (f *Int64Field) Add(r Base) {
	v := f.read(r)
	f.stats.add(v)
	f.vals = append(f.vals, v)
}

func (f *Int64Field) Levels() ([]uint8, []uint8) {
	return nil, nil
}

type StringField struct {
	parquet.RequiredField
	vals  []string
	read  func(r Base) string
	write func(r *Base, vals []string)
	stats *stringStats
}

func NewStringField(read func(r Base) string, write func(r *Base, vals []string), path []string, opts ...func(*parquet.RequiredField)) *StringField {
	return &StringField{
		read:          read,
		write:         write,
		RequiredField: parquet.NewRequiredField(path, opts...),
		stats:         newStringStats(),
	}
}

func (f *StringField) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: StringType, RepetitionType: parquet.RepetitionRequired, Types: []int{0}}
}

func (f *StringField) Write(w io.Writer, meta *parquet.Metadata) error {
	buf := buffpool.Get()
	defer buffpool.Put(buf)

	bs := make([]byte, 4)
	for _, s := range f.vals {
		binary.LittleEndian.PutUint32(bs, uint32(len(s)))
		if _, err := buf.Write(bs); err != nil {
			return err
		}
		buf.WriteString(s)
	}

	return f.DoWrite(w, meta, buf.Bytes(), len(f.vals), f.stats)
}

func (f *StringField) Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error {
	rr, _, err := f.DoRead(ctx, r, pg)
	if err != nil {
		return err
	}

	for j := 0; j < pg.N; j++ {
		var x int32
		if err := binary.Read(rr, binary.LittleEndian, &x); err != nil {
			return err
		}
		s := make([]byte, x)
		if _, err := rr.Read(s); err != nil {
			return err
		}

		f.vals = append(f.vals, string(s))
	}
	return nil
}

func (f *StringField) Scan(r *Base) {
	if len(f.vals) == 0 {
		return
	}

	f.write(r, f.vals)
	f.vals = f.vals[1:]
}

func (f *StringField) Add(r Base) {
	v := f.read(r)
	f.stats.add(v)
	f.vals = append(f.vals, v)
}

func (f *StringField) Levels() ([]uint8, []uint8) {
	return nil, nil
}

type StringOptionalField struct {
	parquet.OptionalField
	vals  []string
	read  func(r Base, vals []string, def, rep []uint8) ([]string, []uint8, []uint8)
	write func(r *Base, vals []string, def, rep []uint8) (int, int)
	stats *stringOptionalStats
}

func NewStringOptionalField(read func(r Base, vals []string, def, rep []uint8) ([]string, []uint8, []uint8), write func(r *Base, vals []string, defs, reps []uint8) (int, int), path []string, types []int, opts ...func(*parquet.OptionalField)) *StringOptionalField {
	return &StringOptionalField{
		read:          read,
		write:         write,
		OptionalField: parquet.NewOptionalField(path, types, opts...),
		stats:         newStringOptionalStats(maxDef(types)),
	}
}

func (f *StringOptionalField) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: StringType, RepetitionType: f.RepetitionType, Types: f.Types}
}

func (f *StringOptionalField) Add(r Base) {
	vals, defs, reps := f.read(r, f.vals, f.Defs, f.Reps)
	f.stats.add(vals[len(f.vals):], defs[len(f.Defs):])
	f.vals = vals
	f.Defs = defs
	f.Reps = reps
}

func (f *StringOptionalField) Scan(r *Base) {
	if len(f.Defs) == 0 {
		return
	}

	v, l := f.write(r, f.vals, f.Defs, f.Reps)
	f.vals = f.vals[v:]
	f.Defs = f.Defs[l:]
	if len(f.Reps) > 0 {
		f.Reps = f.Reps[l:]
	}
}

func (f *StringOptionalField) Write(w io.Writer, meta *parquet.Metadata) error {
	buf := buffpool.Get()
	defer buffpool.Put(buf)

	bs := make([]byte, 4)
	for _, s := range f.vals {
		binary.LittleEndian.PutUint32(bs, uint32(len(s)))
		if _, err := buf.Write(bs); err != nil {
			return err
		}
		buf.WriteString(s)
	}

	return f.DoWrite(w, meta, buf.Bytes(), len(f.Defs), f.stats)
}

func (f *StringOptionalField) Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error {
	rr, _, err := f.DoRead(ctx, r, pg)
	if err != nil {
		return err
	}

	for j := 0; j < f.Values(); j++ {
		var x int32
		if err := binary.Read(rr, binary.LittleEndian, &x); err != nil {
			return err
		}
		s := make([]byte, x)
		if _, err := rr.Read(s); err != nil {
			return err
		}

		f.vals = append(f.vals, string(s))
	}
	return nil
}

func (f *StringOptionalField) Levels() ([]uint8, []uint8) {
	return f.Defs, f.Reps
}

type Int32Field struct {
	vals []int32
	parquet.RequiredField
	read  func(r Base) int32
	write func(r *Base, vals []int32)
	stats *int32stats
}

func NewInt32Field(read func(r Base) int32, write func(r *Base, vals []int32), path []string, opts ...func(*parquet.RequiredField)) *Int32Field {
	return &Int32Field{
		read:          read,
		write:         write,
		RequiredField: parquet.NewRequiredField(path, opts...),
		stats:         newInt32stats(),
	}
}

func (f *Int32Field) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: Int32Type, RepetitionType: parquet.RepetitionRequired, Types: []int{0}}
}

func (f *Int32Field) Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error {
	rr, _, err := f.DoRead(ctx, r, pg)
	if err != nil {
		return err
	}

	v := make([]int32, int(pg.N))
	err = binary.Read(rr, binary.LittleEndian, &v)
	f.vals = append(f.vals, v...)
	return err
}

func (f *Int32Field) Write(w io.Writer, meta *parquet.Metadata) error {
	buf := buffpool.Get()
	defer buffpool.Put(buf)

	bs := make([]byte, 4)
	for _, v := range f.vals {
		binary.LittleEndian.PutUint32(bs, uint32(v))
		if _, err := buf.Write(bs); err != nil {
			return err
		}
	}
	return f.DoWrite(w, meta, buf.Bytes(), len(f.vals), f.stats)
}

func (f *Int32Field) Scan(r *Base) {
	if len(f.vals) == 0 {
		return
	}

	f.write(r, f.vals)
	f.vals = f.vals[1:]
}

func (f *Int32Field) Add(r Base) {
	v := f.read(r)
	f.stats.add(v)
	f.vals = append(f.vals, v)
}

func (f *Int32Field) Levels() ([]uint8, []uint8) {
	return nil, nil
}

type Float64Field struct {
	vals []float64
	parquet.RequiredField
	read  func(r Base) float64
	write func(r *Base, vals []float64)
	stats *float64stats
}

func NewFloat64Field(read func(r Base) float64, write func(r *Base, vals []float64), path []string, opts ...func(*parquet.RequiredField)) *Float64Field {
	return &Float64Field{
		read:          read,
		write:         write,
		RequiredField: parquet.NewRequiredField(path, opts...),
		stats:         newFloat64stats(),
	}
}

func (f *Float64Field) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: Float64Type, RepetitionType: parquet.RepetitionRequired, Types: []int{0}}
}

func (f *Float64Field) Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error {
	rr, _, err := f.DoRead(ctx, r, pg)
	if err != nil {
		return err
	}

	v := make([]float64, int(pg.N))
	err = binary.Read(rr, binary.LittleEndian, &v)
	f.vals = append(f.vals, v...)
	return err
}

func (f *Float64Field) Write(w io.Writer, meta *parquet.Metadata) error {
	buf := buffpool.Get()
	defer buffpool.Put(buf)

	bs := make([]byte, 8)
	for _, v := range f.vals {
		binary.LittleEndian.PutUint64(bs, math.Float64bits(v))
		if _, err := buf.Write(bs); err != nil {
			return err
		}
	}
	return f.DoWrite(w, meta, buf.Bytes(), len(f.vals), f.stats)
}

func (f *Float64Field) Scan(r *Base) {
	if len(f.vals) == 0 {
		return
	}

	f.write(r, f.vals)
	f.vals = f.vals[1:]
}

func (f *Float64Field) Add(r Base) {
	v := f.read(r)
	f.stats.add(v)
	f.vals = append(f.vals, v)
}

func (f *Float64Field) Levels() ([]uint8, []uint8) {
	return nil, nil
}

type BoolField struct {
	parquet.RequiredField
	vals  []bool
	read  func(r Base) bool
	write func(r *Base, vals []bool)
	stats *boolStats
}

func NewBoolField(read func(r Base) bool, write func(r *Base, vals []bool), path []string, opts ...func(*parquet.RequiredField)) *BoolField {
	return &BoolField{
		read:          read,
		write:         write,
		RequiredField: parquet.NewRequiredField(path, opts...),
	}
}

func (f *BoolField) Schema() parquet.Field {
	return parquet.Field{Name: f.Name(), Path: f.Path(), Type: BoolType, RepetitionType: parquet.RepetitionRequired, Types: []int{0}}
}

func (f *BoolField) Write(w io.Writer, meta *parquet.Metadata) error {
	ln := len(f.vals)
	n := (ln + 7) / 8
	rawBuf := make([]byte, n)

	for i := 0; i < ln; i++ {
		if f.vals[i] {
			rawBuf[i/8] = rawBuf[i/8] | (1 << uint32(i%8))
		}
	}

	return f.DoWrite(w, meta, rawBuf, len(f.vals), newBoolStats())
}

func (f *BoolField) Read(ctx context.Context, r io.ReadSeeker, pg parquet.Page) error {
	rr, sizes, err := f.DoRead(ctx, r, pg)
	if err != nil {
		return err
	}

	f.vals, err = parquet.GetBools(rr, int(pg.N), sizes)
	return err
}

func (f *BoolField) Scan(r *Base) {
	if len(f.vals) == 0 {
		return
	}

	f.write(r, f.vals)
	f.vals = f.vals[1:]
}

func (f *BoolField) Add(r Base) {
	v := f.read(r)
	f.vals = append(f.vals, v)
}

func (f *BoolField) Levels() ([]uint8, []uint8) {
	return nil, nil
}

type int64stats struct {
	min int64
	max int64
}

func newInt64stats() *int64stats {
	return &int64stats{
		min: int64(math.MaxInt64),
	}
}

func (i *int64stats) add(val int64) {
	if val < i.min {
		i.min = val
	}
	if val > i.max {
		i.max = val
	}
}

func (f *int64stats) bytes(v int64) []byte {
	bs := make([]byte, 8)
	binary.LittleEndian.PutUint64(bs, uint64(v))
	return bs
}

func (f *int64stats) NullCount() *int64 {
	return nil
}

func (f *int64stats) DistinctCount() *int64 {
	return nil
}

func (f *int64stats) Min() []byte {
	return f.bytes(f.min)
}

func (f *int64stats) Max() []byte {
	return f.bytes(f.max)
}

const nilString = "__#NIL#__"

type stringStats struct {
	min string
	max string
}

func newStringStats() *stringStats {
	return &stringStats{
		min: nilString,
		max: nilString,
	}
}

func (s *stringStats) add(val string) {
	if s.min == nilString {
		s.min = val
	} else {
		if val < s.min {
			s.min = val
		}
	}
	if s.max == nilString {
		s.max = val
	} else {
		if val > s.max {
			s.max = val
		}
	}
}

func (s *stringStats) NullCount() *int64 {
	return nil
}

func (s *stringStats) DistinctCount() *int64 {
	return nil
}

func (s *stringStats) Min() []byte {
	if s.min == nilString {
		return nil
	}
	return []byte(s.min)
}

func (s *stringStats) Max() []byte {
	if s.max == nilString {
		return nil
	}
	return []byte(s.max)
}

const nilOptString = "__#NIL#__"

type stringOptionalStats struct {
	min    string
	max    string
	nils   int64
	maxDef uint8
}

func newStringOptionalStats(d uint8) *stringOptionalStats {
	return &stringOptionalStats{
		min:    nilOptString,
		max:    nilOptString,
		maxDef: d,
	}
}

func (s *stringOptionalStats) add(vals []string, defs []uint8) {
	var i int
	for _, def := range defs {
		if def < s.maxDef {
			s.nils++
		} else {
			val := vals[i]
			if s.min == nilOptString {
				s.min = val
			} else {
				if val < s.min {
					s.min = val
				}
			}
			if s.max == nilOptString {
				s.max = val
			} else {
				if val > s.max {
					s.max = val
				}
			}
			i++
		}
	}
}

func (s *stringOptionalStats) NullCount() *int64 {
	return &s.nils
}

func (s *stringOptionalStats) DistinctCount() *int64 {
	return nil
}

func (s *stringOptionalStats) Min() []byte {
	if s.min == nilOptString {
		return nil
	}
	return []byte(s.min)
}

func (s *stringOptionalStats) Max() []byte {
	if s.max == nilOptString {
		return nil
	}
	return []byte(s.max)
}

type int32stats struct {
	min int32
	max int32
}

func newInt32stats() *int32stats {
	return &int32stats{
		min: int32(math.MaxInt32),
	}
}

func (i *int32stats) add(val int32) {
	if val < i.min {
		i.min = val
	}
	if val > i.max {
		i.max = val
	}
}

func (f *int32stats) bytes(v int32) []byte {
	bs := make([]byte, 4)
	binary.LittleEndian.PutUint32(bs, uint32(v))
	return bs
}

func (f *int32stats) NullCount() *int64 {
	return nil
}

func (f *int32stats) DistinctCount() *int64 {
	return nil
}

func (f *int32stats) Min() []byte {
	return f.bytes(f.min)
}

func (f *int32stats) Max() []byte {
	return f.bytes(f.max)
}

type float64stats struct {
	min float64
	max float64
}

func newFloat64stats() *float64stats {
	return &float64stats{
		min: float64(math.MaxFloat64),
	}
}

func (i *float64stats) add(val float64) {
	if val < i.min {
		i.min = val
	}
	if val > i.max {
		i.max = val
	}
}

func (f *float64stats) bytes(v float64) []byte {
	bs := make([]byte, 8)
	binary.LittleEndian.PutUint64(bs, math.Float64bits(v))
	return bs
}

func (f *float64stats) NullCount() *int64 {
	return nil
}

func (f *float64stats) DistinctCount() *int64 {
	return nil
}

func (f *float64stats) Min() []byte {
	return f.bytes(f.min)
}

func (f *float64stats) Max() []byte {
	return f.bytes(f.max)
}

type boolStats struct{}

func newBoolStats() *boolStats             { return &boolStats{} }
func (b *boolStats) NullCount() *int64     { return nil }
func (b *boolStats) DistinctCount() *int64 { return nil }
func (b *boolStats) Min() []byte           { return nil }
func (b *boolStats) Max() []byte           { return nil }

func pint32(i int32) *int32       { return &i }
func puint32(i uint32) *uint32    { return &i }
func pint64(i int64) *int64       { return &i }
func puint64(i uint64) *uint64    { return &i }
func pbool(b bool) *bool          { return &b }
func pstring(s string) *string    { return &s }
func pfloat32(f float32) *float32 { return &f }
func pfloat64(f float64) *float64 { return &f }

// keeps track of the indices of repeated fields
// that have already been handled by a previous field
type indices []int

func (i indices) rep(rep uint8) {
	if rep > 0 {
		r := int(rep) - 1
		i[r] = i[r] + 1
		for j := int(rep); j < len(i); j++ {
			i[j] = 0
		}
	}
}

func maxDef(types []int) uint8 {
	var out uint8
	for _, typ := range types {
		if typ > 0 {
			out++
		}
	}
	return out
}

func Int32Type(se *sch.SchemaElement) {
	t := sch.Type_INT32
	se.Type = &t
}

func Uint32Type(se *sch.SchemaElement) {
	t := sch.Type_INT32
	se.Type = &t
	ct := sch.ConvertedType_UINT_32
	se.ConvertedType = &ct
}

func Int64Type(se *sch.SchemaElement) {
	t := sch.Type_INT64
	se.Type = &t
}

func Uint64Type(se *sch.SchemaElement) {
	t := sch.Type_INT64
	se.Type = &t
	ct := sch.ConvertedType_UINT_64
	se.ConvertedType = &ct
}

func Float32Type(se *sch.SchemaElement) {
	t := sch.Type_FLOAT
	se.Type = &t
}

func Float64Type(se *sch.SchemaElement) {
	t := sch.Type_DOUBLE
	se.Type = &t
}

func BoolType(se *sch.SchemaElement) {
	t := sch.Type_BOOLEAN
	se.Type = &t
}

func StringType(se *sch.SchemaElement) {
	t := sch.Type_BYTE_ARRAY
	se.Type = &t
}
